// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VideoRecorderUDP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VideoRecorderUDP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VideoRecorderRemote {

namespace {

const ::google::protobuf::Descriptor* VideoRecorderUDP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoRecorderUDP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VideoRecorderUDP_2eproto() {
  protobuf_AddDesc_VideoRecorderUDP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VideoRecorderUDP.proto");
  GOOGLE_CHECK(file != NULL);
  VideoRecorderUDP_descriptor_ = file->message_type(0);
  static const int VideoRecorderUDP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecorderUDP, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecorderUDP, isend_),
  };
  VideoRecorderUDP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoRecorderUDP_descriptor_,
      VideoRecorderUDP::default_instance_,
      VideoRecorderUDP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecorderUDP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoRecorderUDP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoRecorderUDP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VideoRecorderUDP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoRecorderUDP_descriptor_, &VideoRecorderUDP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VideoRecorderUDP_2eproto() {
  delete VideoRecorderUDP::default_instance_;
  delete VideoRecorderUDP_reflection_;
}

void protobuf_AddDesc_VideoRecorderUDP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026VideoRecorderUDP.proto\022\023VideoRecorderR"
    "emote\"3\n\020VideoRecorderUDP\022\020\n\010FileName\030\001 "
    "\002(\t\022\r\n\005IsEnd\030\002 \002(\010", 98);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VideoRecorderUDP.proto", &protobuf_RegisterTypes);
  VideoRecorderUDP::default_instance_ = new VideoRecorderUDP();
  VideoRecorderUDP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VideoRecorderUDP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VideoRecorderUDP_2eproto {
  StaticDescriptorInitializer_VideoRecorderUDP_2eproto() {
    protobuf_AddDesc_VideoRecorderUDP_2eproto();
  }
} static_descriptor_initializer_VideoRecorderUDP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VideoRecorderUDP::kFileNameFieldNumber;
const int VideoRecorderUDP::kIsEndFieldNumber;
#endif  // !_MSC_VER

VideoRecorderUDP::VideoRecorderUDP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoRecorderUDP::InitAsDefaultInstance() {
}

VideoRecorderUDP::VideoRecorderUDP(const VideoRecorderUDP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoRecorderUDP::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoRecorderUDP::~VideoRecorderUDP() {
  SharedDtor();
}

void VideoRecorderUDP::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void VideoRecorderUDP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoRecorderUDP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoRecorderUDP_descriptor_;
}

const VideoRecorderUDP& VideoRecorderUDP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VideoRecorderUDP_2eproto();
  return *default_instance_;
}

VideoRecorderUDP* VideoRecorderUDP::default_instance_ = NULL;

VideoRecorderUDP* VideoRecorderUDP::New() const {
  return new VideoRecorderUDP;
}

void VideoRecorderUDP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    isend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoRecorderUDP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsEnd;
        break;
      }

      // required bool IsEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoRecorderUDP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // required bool IsEnd = 2;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoRecorderUDP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // required bool IsEnd = 2;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoRecorderUDP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required bool IsEnd = 2;
    if (has_isend()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoRecorderUDP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoRecorderUDP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoRecorderUDP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoRecorderUDP::MergeFrom(const VideoRecorderUDP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoRecorderUDP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoRecorderUDP::CopyFrom(const VideoRecorderUDP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoRecorderUDP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VideoRecorderUDP::Swap(VideoRecorderUDP* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(isend_, other->isend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoRecorderUDP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoRecorderUDP_descriptor_;
  metadata.reflection = VideoRecorderUDP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VideoRecorderRemote

// @@protoc_insertion_point(global_scope)
