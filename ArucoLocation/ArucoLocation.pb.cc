// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArucoLocation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArucoLocation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aruco {

namespace {

const ::google::protobuf::Descriptor* ArucoLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArucoLocation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ArucoLocation_2eproto() {
  protobuf_AddDesc_ArucoLocation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ArucoLocation.proto");
  GOOGLE_CHECK(file != NULL);
  ArucoLocation_descriptor_ = file->message_type(0);
  static const int ArucoLocation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, robotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, alfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, timestamp_),
  };
  ArucoLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArucoLocation_descriptor_,
      ArucoLocation::default_instance_,
      ArucoLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArucoLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArucoLocation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ArucoLocation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArucoLocation_descriptor_, &ArucoLocation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ArucoLocation_2eproto() {
  delete ArucoLocation::default_instance_;
  delete ArucoLocation_reflection_;
}

void protobuf_AddDesc_ArucoLocation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ArucoLocation.proto\022\005Aruco\"W\n\rArucoLoc"
    "ation\022\017\n\007RobotID\030\001 \002(\005\022\t\n\001X\030\002 \002(\001\022\t\n\001Y\030\003"
    " \002(\001\022\014\n\004Alfa\030\004 \002(\001\022\021\n\tTimeStamp\030\005 \002(\005", 117);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ArucoLocation.proto", &protobuf_RegisterTypes);
  ArucoLocation::default_instance_ = new ArucoLocation();
  ArucoLocation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArucoLocation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArucoLocation_2eproto {
  StaticDescriptorInitializer_ArucoLocation_2eproto() {
    protobuf_AddDesc_ArucoLocation_2eproto();
  }
} static_descriptor_initializer_ArucoLocation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ArucoLocation::kRobotIDFieldNumber;
const int ArucoLocation::kXFieldNumber;
const int ArucoLocation::kYFieldNumber;
const int ArucoLocation::kAlfaFieldNumber;
const int ArucoLocation::kTimeStampFieldNumber;
#endif  // !_MSC_VER

ArucoLocation::ArucoLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArucoLocation::InitAsDefaultInstance() {
}

ArucoLocation::ArucoLocation(const ArucoLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArucoLocation::SharedCtor() {
  _cached_size_ = 0;
  robotid_ = 0;
  x_ = 0;
  y_ = 0;
  alfa_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArucoLocation::~ArucoLocation() {
  SharedDtor();
}

void ArucoLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArucoLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArucoLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArucoLocation_descriptor_;
}

const ArucoLocation& ArucoLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ArucoLocation_2eproto();
  return *default_instance_;
}

ArucoLocation* ArucoLocation::default_instance_ = NULL;

ArucoLocation* ArucoLocation::New() const {
  return new ArucoLocation;
}

void ArucoLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    robotid_ = 0;
    x_ = 0;
    y_ = 0;
    alfa_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArucoLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 RobotID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotid_)));
          set_has_robotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_X;
        break;
      }

      // required double X = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Y;
        break;
      }

      // required double Y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Alfa;
        break;
      }

      // required double Alfa = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Alfa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alfa_)));
          set_has_alfa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TimeStamp;
        break;
      }

      // required int32 TimeStamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArucoLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 RobotID = 1;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robotid(), output);
  }

  // required double X = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // required double Y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // required double Alfa = 4;
  if (has_alfa()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->alfa(), output);
  }

  // required int32 TimeStamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timestamp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArucoLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 RobotID = 1;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robotid(), target);
  }

  // required double X = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // required double Y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // required double Alfa = 4;
  if (has_alfa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->alfa(), target);
  }

  // required int32 TimeStamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timestamp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArucoLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 RobotID = 1;
    if (has_robotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotid());
    }

    // required double X = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double Y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double Alfa = 4;
    if (has_alfa()) {
      total_size += 1 + 8;
    }

    // required int32 TimeStamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArucoLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArucoLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArucoLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArucoLocation::MergeFrom(const ArucoLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_alfa()) {
      set_alfa(from.alfa());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArucoLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArucoLocation::CopyFrom(const ArucoLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArucoLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ArucoLocation::Swap(ArucoLocation* other) {
  if (other != this) {
    std::swap(robotid_, other->robotid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(alfa_, other->alfa_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArucoLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArucoLocation_descriptor_;
  metadata.reflection = ArucoLocation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Aruco

// @@protoc_insertion_point(global_scope)
